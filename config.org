#+TITLE: adramax emacs config
#+AUTHOR: Simon Berg Rasmussen

* PACKAGE MANAGEMENT
** Setup package.el to work with MELPHA.

  #+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	       '("melpha-stable" . "https://stable.melpa.org/packages/"))
  (package-refresh-contents)
  (package-initialize)
  #+end_src

** Install use-package
  
   #+begin_src emacs-lisp
   (unless (package-installed-p 'use-package)
     (package-install 'use-package))
   #+end_src

** LSP-mode
LSP-mode integration for emacs
#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (XXX-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
;; if you are helm user
(use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
(use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language

;; optional if you want which-key integration
(use-package which-key
    :config
    (which-key-mode))
#+end_src

** EVIL MODE

   #+begin_src emacs-lisp
   (use-package evil
     :ensure t  ;; install evil if not installed
     :init      ;; tweak evil's configuration before loading it
     (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
     (setq evil-want-keybinding nil)
     (setq evil-vsplit-window-right t)
     (setq evil-split-window-below t)
     (evil-mode))
   (use-package evil-collection
     :after evil
     :ensure t
     :config
     (evil-collection-init))
   #+end_src

* Projectile
  Projectile is a plugin used for project management and for easier navigating within a project
  #+begin_src emacs-lisp
  (use-package projectile
  :ensure t
  :config
  (projectile-global-mode 1))
  #+end_src 

* GRAPHICAL USER INTERFACE SETTINGS

** Disable menu, toolbar and scrollbar
   #+begin_src emacs-lisp
   (menu-bar-mode -1)
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
   #+end_src

** Display line numbers and truncated lines
   #+begin_src emacs-lisp
   (global-display-line-numbers-mode 1)
  ;; (global-visual-line-mode)
   (setq display-line-numbers-type 'relative)
   #+end_src 
 
* THEME

  #+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t)
  (setq doom-themes-enable-bold t ; if nil, bold is disabled always
	doom-themes-enable-italic t)
  (load-theme 'doom-one t)
  #+end_src

** DOOM MODELINE
   #+begin_src emacs-lisp
   (use-package doom-modeline
     :ensure t)
   (doom-modeline-mode 1)
   #+end_src

* WHICH KEY
  #+begin_src emacs-lisp
  (use-package which-key
    :ensure t)
  (which-key-mode)
  #+end_src

* ORG Mode stuff
  Org mode is one of the dealbreakers for me in regards to using emacs, but it does need some tweaking
** Definitions
   #+begin_src emacs-lisp
   (add-hook 'org-mode-hook 'org-indent-mode)
   (setq org-directory "~/Org"
	 org-agenda-files '("~/Org/agenda.org")
	 org-default-notes-file (expand-file-name "notes.org" org-directory)
	 org-ellipsis " â–¼ "
	 org-log-done 'time
	 org-journal-dir "~/Org/journal/"
	 org-journal-date-format "%B %d, %Y (%A) "
	 org-journal-file-format "%Y-%m-%d.org"
	 org-hide-emphasis-markers t)
   (setq org-src-preserve-indentation nil
	 org-src-tab-acts-natively t
	 org-edit-src-content-indentation 0)
   #+end_src
** Prettier Org mode bullet points
   #+begin_src emacs-lisp
   (use-package org-bullets
     :ensure t)
   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   #+end_src


* MAGIT
A git client for emacs, should be pretty decent
#+begin_src emacs-lisp
(use-package magit
  :ensure t)
(use-package magit-todos
  :ensure t
  :config (magit-todos-mode))
#+end_src
